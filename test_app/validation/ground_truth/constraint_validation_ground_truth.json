{
  "C1_testSimpleStringEquals": {
    "testId": "C1",
    "testMethod": "testSimpleStringEquals",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/simple_equals.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_SIMPLE_EQUALS\")", "(Return<String.equals()> == 1)", "(value.equals(\"expected\"))"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Simple constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.95
  },

  "C2_testMultipleStringEquals": {
    "testId": "C2",
    "testMethod": "testMultipleStringEquals",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/multiple_equals.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_MULTIPLE_EQUALS\")", "(Return<String.equals()> == 1)", "(value1.equals(\"expected1\"))", "(value2.equals(\"expected2\"))"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Multiple string constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.9
  },

  "C3_testAndCondition": {
    "testId": "C3",
    "testMethod": "testAndCondition",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/and_condition.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_AND\")", "(Return<String.equals()> == 1)", "And((condition1 == true), (condition2 == true))"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "AND condition constraint",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.85
  },

  "C4_testOrCondition": {
    "testId": "C4",
    "testMethod": "testOrCondition",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/or_condition.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_OR\")", "(Return<String.equals()> == 1)", "Or((option1.equals(\"value1\")), (option1.equals(\"value2\")))"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "OR condition constraint",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.85
  },

  "C5_testNotCondition": {
    "testId": "C5",
    "testMethod": "testNotCondition",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/not_condition.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_NOT\")", "(Return<String.equals()> == 1)", "Not((forbidden_value.equals(\"forbidden\")))"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "NOT condition constraint",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.8
  },

  "C6_testComplexBooleanLogic": {
    "testId": "C6",
    "testMethod": "testComplexBooleanLogic",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/complex_boolean.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_COMPLEX_BOOLEAN\")", "(Return<String.equals()> == 1)", "And(Or((a == true), (b == true)), (c == false))"],
    "expectedVariableCount": 5,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Complex boolean logic constraint",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Complex boolean logic"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.75
  },

  "C7_testNestedConditions": {
    "testId": "C7",
    "testMethod": "testNestedConditions",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/nested_conditions.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_NESTED\")", "(Return<String.equals()> == 1)", "And((outer_condition == true), And((inner_condition1 == true), (inner_condition2 == true)))"],
    "expectedVariableCount": 5,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Nested condition constraint",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Nested conditionals"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.7
  },

  "C8_testNumericConstraints": {
    "testId": "C8",
    "testMethod": "testNumericConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/numeric_constraints.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_NUMERIC\")", "(Return<String.equals()> == 1)", "(number > 0)", "(number < 100)", "(number != 50)"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Numeric constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.85
  },

  "C9_testLengthConstraints": {
    "testId": "C9",
    "testMethod": "testLengthConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/length_constraints.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_LENGTH\")", "(Return<String.equals()> == 1)", "(string_value.length() > 5)", "(string_value.length() < 20)"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Length constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.8
  },

  "C10_testNullChecks": {
    "testId": "C10",
    "testMethod": "testNullChecks",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/null_checks.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_NULL_CHECKS\")", "(Return<String.equals()> == 1)", "(value1 != null)", "(value2 != null)", "(value3 == null)"],
    "expectedVariableCount": 5,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Null check constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.85
  },

  "C11_testStringContains": {
    "testId": "C11",
    "testMethod": "testStringContains",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/string_contains.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_STRING_CONTAINS\")", "(Return<String.equals()> == 1)", "(string_value.contains(\"substring\"))", "Not((string_value.contains(\"forbidden\")))"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "String contains constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.8
  },

  "C12_testStringStartsWith": {
    "testId": "C12",
    "testMethod": "testStringStartsWith",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/string_starts_with.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_STRING_STARTS_WITH\")", "(Return<String.equals()> == 1)", "(prefix_value.startsWith(\"prefix_\"))", "Not((prefix_value.startsWith(\"invalid_\")))"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "String startsWith constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.8
  },

  "C13_testStringEndsWith": {
    "testId": "C13",
    "testMethod": "testStringEndsWith",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/string_ends_with.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_STRING_ENDS_WITH\")", "(Return<String.equals()> == 1)", "(suffix_value.endsWith(\".log\"))", "Not((suffix_value.endsWith(\".tmp\")))"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "String endsWith constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.8
  },

  "C14_testRegexMatching": {
    "testId": "C14",
    "testMethod": "testRegexMatching",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/regex_matching.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_REGEX\")", "(Return<String.equals()> == 1)", "(regex_value.matches(\"^[a-zA-Z0-9_]+$\"))", "Not((regex_value.matches(\".*[<>\\\"'&].*\")))"],
    "expectedVariableCount": 3,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Regex matching constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Regex validation"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.7
  },

  "C15_testArrayLengthConstraints": {
    "testId": "C15",
    "testMethod": "testArrayLengthConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/array_length.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_ARRAY_LENGTH\")", "(Return<String.equals()> == 1)", "(array_value != null)", "(array_value.length > 2)", "(array_value.length < 10)"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Array length constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": [],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.8
  },

  "C16_testMethodChainConstraints": {
    "testId": "C16",
    "testMethod": "testMethodChainConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/method_chain.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_METHOD_CHAIN\")", "(Return<String.equals()> == 1)", "(chain_result.trim().toLowerCase().equals(\"expected\"))"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Method chain constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Method chaining"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.75
  },

  "C17_testExceptionBasedConstraints": {
    "testId": "C17",
    "testMethod": "testExceptionBasedConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/exception_based.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_EXCEPTION_BASED\")", "(Return<String.equals()> == 1)", "(exception_occurred == false)", "(fallback_value != null)"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Exception-based constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Exception-based control flow"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.7
  },

  "C18_testTimeBasedConstraints": {
    "testId": "C18",
    "testMethod": "testTimeBasedConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/time_based.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_TIME_BASED\")", "(Return<String.equals()> == 1)", "(timestamp > 0)", "(timestamp < max_timestamp)", "(is_valid_time == true)"],
    "expectedVariableCount": 5,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Time-based constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Timestamp validation"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.75
  },

  "C19_testSystemPropertyConstraints": {
    "testId": "C19",
    "testMethod": "testSystemPropertyConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "PARTIALLY_CONTROLLED",
    "expectedPath": "/data/constraint/system_property_based.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_SYSTEM_PROPERTY\")", "(Return<String.equals()> == 1)", "(system_property != null)", "(system_property.equals(\"expected_value\"))"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": ["System.getProperty()"],
    "expectedConstructionPattern": "System property constraint validation",
    "shouldResolveCompletely": false,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["System property access"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.65
  },

  "C20_testEnvironmentVariableConstraints": {
    "testId": "C20",
    "testMethod": "testEnvironmentVariableConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "PARTIALLY_CONTROLLED",
    "expectedPath": "/data/constraint/env_var_based.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_ENV_VAR\")", "(Return<String.equals()> == 1)", "(env_var != null)", "(env_var.startsWith(\"VALID_\"))"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": ["System.getenv()"],
    "expectedConstructionPattern": "Environment variable constraint validation",
    "shouldResolveCompletely": false,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationTests.processConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Environment variable access"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.65
  },

  "C21_testDeepNestedConditions": {
    "testId": "C21",
    "testMethod": "testDeepNestedConditions",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/deep_nested.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_DEEP_NESTED\")", "(Return<String.equals()> == 1)", "And((level1 == true), And((level2 == true), And((level3 == true), (level4 == true))))"],
    "expectedVariableCount": 6,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Deep nested condition constraint",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Deep nesting"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.6
  },

  "C22_testMultiPathConstraints": {
    "testId": "C22",
    "testMethod": "testMultiPathConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/multi_path_[path_id].log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_MULTI_PATH\")", "(Return<String.equals()> == 1)", "Or((path_choice == 1), (path_choice == 2), (path_choice == 3))", "(path_id != null)"],
    "expectedVariableCount": 4,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Multi-path constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Multi-path logic"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.7
  },

  "C23_testLoopBasedConstraints": {
    "testId": "C23",
    "testMethod": "testLoopBasedConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/loop_based_[iteration].log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_LOOP_BASED\")", "(Return<String.equals()> == 1)", "(loop_counter > 0)", "(loop_counter <= max_iterations)", "(break_condition == true)"],
    "expectedVariableCount": 5,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Loop-based constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Loop-based logic"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.65
  },

  "C24_testRecursiveConstraints": {
    "testId": "C24",
    "testMethod": "testRecursiveConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/recursive_[depth].log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_RECURSIVE\")", "(Return<String.equals()> == 1)", "(recursion_depth > 0)", "(recursion_depth <= max_depth)", "(base_case_reached == true)"],
    "expectedVariableCount": 5,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Recursive constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Recursive logic"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.6
  },

  "C25_testStateMachineConstraints": {
    "testId": "C25",
    "testMethod": "testStateMachineConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/state_machine_[state].log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_STATE_MACHINE\")", "(Return<String.equals()> == 1)", "(current_state.equals(\"target_state\"))", "(valid_transition == true)", "(state_history.contains(\"initial_state\"))"],
    "expectedVariableCount": 6,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "State machine constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["State machine logic"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.55
  },

  "C26_testDataStructureConstraints": {
    "testId": "C26",
    "testMethod": "testDataStructureConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/data_structure.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_DATA_STRUCTURE\")", "(Return<String.equals()> == 1)", "(map_data.containsKey(\"required_key\"))", "(list_data.size() > 2)", "(set_data.contains(\"required_element\"))"],
    "expectedVariableCount": 6,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Data structure constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Complex data structures"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.65
  },

  "C27_testCryptographicConstraints": {
    "testId": "C27",
    "testMethod": "testCryptographicConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/cryptographic.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_CRYPTOGRAPHIC\")", "(Return<String.equals()> == 1)", "(hash_value.equals(expected_hash))", "(signature_valid == true)", "(decryption_successful == true)"],
    "expectedVariableCount": 6,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Cryptographic constraint validation",
    "shouldResolveCompletely": false,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Cryptographic operations"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.4
  },

  "C28_testReflectionBasedConstraints": {
    "testId": "C28",
    "testMethod": "testReflectionBasedConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/reflection_based.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_REFLECTION\")", "(Return<String.equals()> == 1)", "(method_result != null)", "(reflection_successful == true)", "(dynamic_value.equals(expected_dynamic))"],
    "expectedVariableCount": 6,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Reflection-based constraint validation",
    "shouldResolveCompletely": false,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Reflection", "Dynamic method invocation"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.45
  },

  "C29_testConcurrentConstraints": {
    "testId": "C29",
    "testMethod": "testConcurrentConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/concurrent_[thread_id].log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_CONCURRENT\")", "(Return<String.equals()> == 1)", "(thread_safe == true)", "(synchronization_successful == true)", "(thread_id > 0)"],
    "expectedVariableCount": 5,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Concurrent constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Concurrency", "Threading"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.5
  },

  "C30_testOptimizationResistantConstraints": {
    "testId": "C30",
    "testMethod": "testOptimizationResistantConstraints",
    "vulnerabilityType": "constraint",
    "pathType": "HARD_CODED",
    "expectedPath": "/data/constraint/optimization_resistant.log",
    "expectedConstraints": ["(intent_action == \"TEST_CONSTRAINT_OPTIMIZATION_RESISTANT\")", "(Return<String.equals()> == 1)", "(anti_optimization_marker == magic_value)", "(dead_code_elimination_defeated == true)", "(constant_folding_prevented == true)"],
    "expectedVariableCount": 6,
    "expectedExternalInputs": [],
    "expectedConstructionPattern": "Optimization-resistant constraint validation",
    "shouldResolveCompletely": true,
    "expectedEntryPoint": "com.test.pathsent_tester.ConstraintValidationComplexTests.processComplexConstraintTest",
    "expectedTargetMethod": "<java.io.FileOutputStream: void write(byte[])>",
    "expectedObfuscationTechniques": ["Anti-optimization", "Obfuscation resistance"],
    "isVulnerable": true,
    "expectedConfidenceScore": 0.4
  }
}