package validation;

import java.util.List;

/**
 * Represents the actual results produced by PathSentinel analysis for a specific test case.
 * This captures what PathSentinel actually found during analysis.
 */
public class PathSentinelResult {
    
    /** Test case identifier */
    public String testCase;
    
    /** Actual resolved file path found by PathSentinel */
    public String actualPath;
    
    /** Actual vulnerability type detected by PathSentinel */
    public String actualVulnerabilityType;
    
    /** Actual path control type determined by PathSentinel */
    public String actualPathType;
    
    /** Actual Z3 constraints generated by PathSentinel */
    public List<String> actualConstraints;
    
    /** Actual number of symbolic variables tracked */
    public int actualVariableCount;
    
    /** Actual external input sources identified */
    public List<String> actualExternalInputs;
    
    /** Actual path construction pattern identified */
    public String actualConstructionPattern;
    
    /** Whether PathSentinel fully resolved the path */
    public boolean pathFullyResolved;
    
    /** Entry point actually used by PathSentinel */
    public String actualEntryPoint;
    
    /** Target method actually reached by PathSentinel */
    public String actualTargetMethod;
    
    /** Obfuscation techniques actually detected */
    public List<String> actualObfuscationTechniques;
    
    /** Whether PathSentinel classified this as vulnerable */
    public boolean detectedAsVulnerable;
    
    /** Confidence score assigned by PathSentinel */
    public double actualConfidenceScore;
    
    /** Analysis time in milliseconds */
    public long analysisTimeMs;
    
    /** Whether analysis timed out */
    public boolean timedOut;
    
    /** Whether analysis encountered errors */
    public boolean hasErrors;
    
    /** Error messages if any */
    public List<String> errorMessages;
    
    /** Raw PathSentinel output for debugging */
    public String rawOutput;
    
    public PathSentinelResult() {}
    
    public PathSentinelResult(String testCase) {
        this.testCase = testCase;
        this.pathFullyResolved = false;
        this.detectedAsVulnerable = false;
        this.actualConfidenceScore = 0.0;
        this.analysisTimeMs = 0;
        this.timedOut = false;
        this.hasErrors = false;
    }
    
    /**
     * Checks if this result indicates PathSentinel successfully analyzed the test case
     */
    public boolean isSuccessful() {
        return !timedOut && !hasErrors && actualPath != null;
    }
    
    /**
     * Gets a summary of the analysis outcome
     */
    public String getSummary() {
        if (timedOut) return "TIMEOUT";
        if (hasErrors) return "ERROR";
        if (!pathFullyResolved) return "PARTIAL_RESOLUTION";
        return "SUCCESS";
    }
    
    @Override
    public String toString() {
        return String.format("PathSentinelResult{testCase='%s', actualPath='%s', " +
                "pathFullyResolved=%s, detectedAsVulnerable=%s, summary='%s'}",
                testCase, actualPath, pathFullyResolved, detectedAsVulnerable, getSummary());
    }
}